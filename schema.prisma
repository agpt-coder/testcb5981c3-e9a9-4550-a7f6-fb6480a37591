// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(FREEUSER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EmojiQueries EmojiQuery[]
  ApiKeys      ApiKey[]
  Subscription Subscription[]
}

model EmojiQuery {
  id             String         @id @default(uuid())
  emoji          String
  interpretation String?
  createdAt      DateTime       @default(now())
  userId         String
  User           User           @relation(fields: [userId], references: [id])
  GroqAnalysis   GroqAnalysis[]

  @@index([userId], name: "userEmojiQueryIndex")
}

model GroqAnalysis {
  id             String     @id @default(uuid())
  emojiQueryId   String
  analysisResult Json?
  createdAt      DateTime   @default(now())
  EmojiQuery     EmojiQuery @relation(fields: [emojiQueryId], references: [id])

  @@index([emojiQueryId], name: "emojiQueryGroqAnalysisIndex")
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  userId    String
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "userApiKeyIndex")
}

model ErrorLog {
  id           String   @id @default(uuid())
  errorType    String
  errorMessage String
  createdAt    DateTime @default(now())
}

model AccessLog {
  id             String   @id @default(uuid())
  requestDetails String
  responseStatus Int
  createdAt      DateTime @default(now())
}

model Subscription {
  id        String           @id @default(uuid())
  userId    String
  plan      SubscriptionPlan
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  expiresAt DateTime
  isActive  Boolean          @default(true)
  User      User             @relation(fields: [userId], references: [id])
  Payment   Payment[]

  @@index([userId], name: "userSubscriptionIndex")
}

model Payment {
  id             String       @id @default(uuid())
  subscriptionId String
  amount         Float
  createdAt      DateTime     @default(now())
  successful     Boolean
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model Documentation {
  id        String   @id @default(uuid())
  version   String
  content   String
  createdAt DateTime @default(now())
}

enum UserRole {
  FREEUSER
  PREMIUMUSER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  PREMIUM
}

